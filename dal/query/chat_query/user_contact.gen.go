// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package chat_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GoChatServer/dal/model/chat_model"
)

func newUserContact(db *gorm.DB, opts ...gen.DOOption) userContact {
	_userContact := userContact{}

	_userContact.userContactDo.UseDB(db, opts...)
	_userContact.userContactDo.UseModel(&chat_model.UserContact{})

	tableName := _userContact.userContactDo.TableName()
	_userContact.ALL = field.NewAsterisk(tableName)
	_userContact.ID = field.NewInt64(tableName, "id")
	_userContact.UserID = field.NewInt64(tableName, "user_id")
	_userContact.FriendUserID = field.NewInt64(tableName, "friend_user_id")
	_userContact.Status = field.NewInt32(tableName, "status")
	_userContact.CreatedAt = field.NewTime(tableName, "created_at")
	_userContact.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userContact.DeletedAt = field.NewField(tableName, "deleted_at")

	_userContact.fillFieldMap()

	return _userContact
}

// userContact 用户联系人
type userContact struct {
	userContactDo

	ALL          field.Asterisk
	ID           field.Int64 // 自增
	UserID       field.Int64 // 用户1-申请人
	FriendUserID field.Int64 // 用户2-被申请添加好友的人
	Status       field.Int32 // 1-申请中；2-好友；3-拒绝；
	CreatedAt    field.Time  // 创建时间
	UpdatedAt    field.Time  // 更新时间
	DeletedAt    field.Field // 删除时间

	fieldMap map[string]field.Expr
}

func (u userContact) Table(newTableName string) *userContact {
	u.userContactDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userContact) As(alias string) *userContact {
	u.userContactDo.DO = *(u.userContactDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userContact) updateTableName(table string) *userContact {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.FriendUserID = field.NewInt64(table, "friend_user_id")
	u.Status = field.NewInt32(table, "status")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userContact) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userContact) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["friend_user_id"] = u.FriendUserID
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userContact) clone(db *gorm.DB) userContact {
	u.userContactDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userContact) replaceDB(db *gorm.DB) userContact {
	u.userContactDo.ReplaceDB(db)
	return u
}

type userContactDo struct{ gen.DO }

type IUserContactDo interface {
	gen.SubQuery
	Debug() IUserContactDo
	WithContext(ctx context.Context) IUserContactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserContactDo
	WriteDB() IUserContactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserContactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserContactDo
	Not(conds ...gen.Condition) IUserContactDo
	Or(conds ...gen.Condition) IUserContactDo
	Select(conds ...field.Expr) IUserContactDo
	Where(conds ...gen.Condition) IUserContactDo
	Order(conds ...field.Expr) IUserContactDo
	Distinct(cols ...field.Expr) IUserContactDo
	Omit(cols ...field.Expr) IUserContactDo
	Join(table schema.Tabler, on ...field.Expr) IUserContactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserContactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserContactDo
	Group(cols ...field.Expr) IUserContactDo
	Having(conds ...gen.Condition) IUserContactDo
	Limit(limit int) IUserContactDo
	Offset(offset int) IUserContactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserContactDo
	Unscoped() IUserContactDo
	Create(values ...*chat_model.UserContact) error
	CreateInBatches(values []*chat_model.UserContact, batchSize int) error
	Save(values ...*chat_model.UserContact) error
	First() (*chat_model.UserContact, error)
	Take() (*chat_model.UserContact, error)
	Last() (*chat_model.UserContact, error)
	Find() ([]*chat_model.UserContact, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.UserContact, err error)
	FindInBatches(result *[]*chat_model.UserContact, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*chat_model.UserContact) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserContactDo
	Assign(attrs ...field.AssignExpr) IUserContactDo
	Joins(fields ...field.RelationField) IUserContactDo
	Preload(fields ...field.RelationField) IUserContactDo
	FirstOrInit() (*chat_model.UserContact, error)
	FirstOrCreate() (*chat_model.UserContact, error)
	FindByPage(offset int, limit int) (result []*chat_model.UserContact, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserContactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userContactDo) Debug() IUserContactDo {
	return u.withDO(u.DO.Debug())
}

func (u userContactDo) WithContext(ctx context.Context) IUserContactDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userContactDo) ReadDB() IUserContactDo {
	return u.Clauses(dbresolver.Read)
}

func (u userContactDo) WriteDB() IUserContactDo {
	return u.Clauses(dbresolver.Write)
}

func (u userContactDo) Session(config *gorm.Session) IUserContactDo {
	return u.withDO(u.DO.Session(config))
}

func (u userContactDo) Clauses(conds ...clause.Expression) IUserContactDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userContactDo) Returning(value interface{}, columns ...string) IUserContactDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userContactDo) Not(conds ...gen.Condition) IUserContactDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userContactDo) Or(conds ...gen.Condition) IUserContactDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userContactDo) Select(conds ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userContactDo) Where(conds ...gen.Condition) IUserContactDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userContactDo) Order(conds ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userContactDo) Distinct(cols ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userContactDo) Omit(cols ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userContactDo) Join(table schema.Tabler, on ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userContactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userContactDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userContactDo) Group(cols ...field.Expr) IUserContactDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userContactDo) Having(conds ...gen.Condition) IUserContactDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userContactDo) Limit(limit int) IUserContactDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userContactDo) Offset(offset int) IUserContactDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userContactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserContactDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userContactDo) Unscoped() IUserContactDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userContactDo) Create(values ...*chat_model.UserContact) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userContactDo) CreateInBatches(values []*chat_model.UserContact, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userContactDo) Save(values ...*chat_model.UserContact) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userContactDo) First() (*chat_model.UserContact, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.UserContact), nil
	}
}

func (u userContactDo) Take() (*chat_model.UserContact, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.UserContact), nil
	}
}

func (u userContactDo) Last() (*chat_model.UserContact, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.UserContact), nil
	}
}

func (u userContactDo) Find() ([]*chat_model.UserContact, error) {
	result, err := u.DO.Find()
	return result.([]*chat_model.UserContact), err
}

func (u userContactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.UserContact, err error) {
	buf := make([]*chat_model.UserContact, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userContactDo) FindInBatches(result *[]*chat_model.UserContact, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userContactDo) Attrs(attrs ...field.AssignExpr) IUserContactDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userContactDo) Assign(attrs ...field.AssignExpr) IUserContactDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userContactDo) Joins(fields ...field.RelationField) IUserContactDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userContactDo) Preload(fields ...field.RelationField) IUserContactDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userContactDo) FirstOrInit() (*chat_model.UserContact, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.UserContact), nil
	}
}

func (u userContactDo) FirstOrCreate() (*chat_model.UserContact, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.UserContact), nil
	}
}

func (u userContactDo) FindByPage(offset int, limit int) (result []*chat_model.UserContact, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userContactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userContactDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userContactDo) Delete(models ...*chat_model.UserContact) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userContactDo) withDO(do gen.Dao) *userContactDo {
	u.DO = *do.(*gen.DO)
	return u
}
