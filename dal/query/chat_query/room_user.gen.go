// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package chat_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GoChatServer/dal/model/chat_model"
)

func newRoomUser(db *gorm.DB, opts ...gen.DOOption) roomUser {
	_roomUser := roomUser{}

	_roomUser.roomUserDo.UseDB(db, opts...)
	_roomUser.roomUserDo.UseModel(&chat_model.RoomUser{})

	tableName := _roomUser.roomUserDo.TableName()
	_roomUser.ALL = field.NewAsterisk(tableName)
	_roomUser.ID = field.NewInt64(tableName, "id")
	_roomUser.RoomID = field.NewInt64(tableName, "room_id")
	_roomUser.UserID = field.NewInt64(tableName, "user_id")
	_roomUser.CustomRoomTitle = field.NewString(tableName, "custom_room_title")
	_roomUser.CustomNickname = field.NewString(tableName, "custom_nickname")
	_roomUser.IsMessageRemind = field.NewInt32(tableName, "is_message_remind")
	_roomUser.IsTop = field.NewInt32(tableName, "is_top")
	_roomUser.IsTopTime = field.NewTime(tableName, "is_top_time")
	_roomUser.CreatedAt = field.NewTime(tableName, "created_at")
	_roomUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roomUser.DeletedAt = field.NewField(tableName, "deleted_at")

	_roomUser.fillFieldMap()

	return _roomUser
}

// roomUser 聊天会话用户
type roomUser struct {
	roomUserDo

	ALL             field.Asterisk
	ID              field.Int64  // 自增
	RoomID          field.Int64  // 聊天会话ID
	UserID          field.Int64  // 用户ID
	CustomRoomTitle field.String // 自定义群 标题
	CustomNickname  field.String // 自定义个人在群的昵称
	IsMessageRemind field.Int32  // 是否消息提醒：1-提醒；2-免打扰；
	IsTop           field.Int32  // 是否置顶：1-是；2-否；
	IsTopTime       field.Time   // 设置置顶时间
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (r roomUser) Table(newTableName string) *roomUser {
	r.roomUserDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roomUser) As(alias string) *roomUser {
	r.roomUserDo.DO = *(r.roomUserDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roomUser) updateTableName(table string) *roomUser {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RoomID = field.NewInt64(table, "room_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.CustomRoomTitle = field.NewString(table, "custom_room_title")
	r.CustomNickname = field.NewString(table, "custom_nickname")
	r.IsMessageRemind = field.NewInt32(table, "is_message_remind")
	r.IsTop = field.NewInt32(table, "is_top")
	r.IsTopTime = field.NewTime(table, "is_top_time")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *roomUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roomUser) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["room_id"] = r.RoomID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["custom_room_title"] = r.CustomRoomTitle
	r.fieldMap["custom_nickname"] = r.CustomNickname
	r.fieldMap["is_message_remind"] = r.IsMessageRemind
	r.fieldMap["is_top"] = r.IsTop
	r.fieldMap["is_top_time"] = r.IsTopTime
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r roomUser) clone(db *gorm.DB) roomUser {
	r.roomUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roomUser) replaceDB(db *gorm.DB) roomUser {
	r.roomUserDo.ReplaceDB(db)
	return r
}

type roomUserDo struct{ gen.DO }

type IRoomUserDo interface {
	gen.SubQuery
	Debug() IRoomUserDo
	WithContext(ctx context.Context) IRoomUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoomUserDo
	WriteDB() IRoomUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoomUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoomUserDo
	Not(conds ...gen.Condition) IRoomUserDo
	Or(conds ...gen.Condition) IRoomUserDo
	Select(conds ...field.Expr) IRoomUserDo
	Where(conds ...gen.Condition) IRoomUserDo
	Order(conds ...field.Expr) IRoomUserDo
	Distinct(cols ...field.Expr) IRoomUserDo
	Omit(cols ...field.Expr) IRoomUserDo
	Join(table schema.Tabler, on ...field.Expr) IRoomUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoomUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoomUserDo
	Group(cols ...field.Expr) IRoomUserDo
	Having(conds ...gen.Condition) IRoomUserDo
	Limit(limit int) IRoomUserDo
	Offset(offset int) IRoomUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomUserDo
	Unscoped() IRoomUserDo
	Create(values ...*chat_model.RoomUser) error
	CreateInBatches(values []*chat_model.RoomUser, batchSize int) error
	Save(values ...*chat_model.RoomUser) error
	First() (*chat_model.RoomUser, error)
	Take() (*chat_model.RoomUser, error)
	Last() (*chat_model.RoomUser, error)
	Find() ([]*chat_model.RoomUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.RoomUser, err error)
	FindInBatches(result *[]*chat_model.RoomUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*chat_model.RoomUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoomUserDo
	Assign(attrs ...field.AssignExpr) IRoomUserDo
	Joins(fields ...field.RelationField) IRoomUserDo
	Preload(fields ...field.RelationField) IRoomUserDo
	FirstOrInit() (*chat_model.RoomUser, error)
	FirstOrCreate() (*chat_model.RoomUser, error)
	FindByPage(offset int, limit int) (result []*chat_model.RoomUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoomUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roomUserDo) Debug() IRoomUserDo {
	return r.withDO(r.DO.Debug())
}

func (r roomUserDo) WithContext(ctx context.Context) IRoomUserDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomUserDo) ReadDB() IRoomUserDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomUserDo) WriteDB() IRoomUserDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomUserDo) Session(config *gorm.Session) IRoomUserDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomUserDo) Clauses(conds ...clause.Expression) IRoomUserDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomUserDo) Returning(value interface{}, columns ...string) IRoomUserDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomUserDo) Not(conds ...gen.Condition) IRoomUserDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomUserDo) Or(conds ...gen.Condition) IRoomUserDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomUserDo) Select(conds ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomUserDo) Where(conds ...gen.Condition) IRoomUserDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomUserDo) Order(conds ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomUserDo) Distinct(cols ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomUserDo) Omit(cols ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomUserDo) Join(table schema.Tabler, on ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomUserDo) Group(cols ...field.Expr) IRoomUserDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomUserDo) Having(conds ...gen.Condition) IRoomUserDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomUserDo) Limit(limit int) IRoomUserDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomUserDo) Offset(offset int) IRoomUserDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomUserDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomUserDo) Unscoped() IRoomUserDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomUserDo) Create(values ...*chat_model.RoomUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomUserDo) CreateInBatches(values []*chat_model.RoomUser, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomUserDo) Save(values ...*chat_model.RoomUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomUserDo) First() (*chat_model.RoomUser, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.RoomUser), nil
	}
}

func (r roomUserDo) Take() (*chat_model.RoomUser, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.RoomUser), nil
	}
}

func (r roomUserDo) Last() (*chat_model.RoomUser, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.RoomUser), nil
	}
}

func (r roomUserDo) Find() ([]*chat_model.RoomUser, error) {
	result, err := r.DO.Find()
	return result.([]*chat_model.RoomUser), err
}

func (r roomUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.RoomUser, err error) {
	buf := make([]*chat_model.RoomUser, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomUserDo) FindInBatches(result *[]*chat_model.RoomUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomUserDo) Attrs(attrs ...field.AssignExpr) IRoomUserDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomUserDo) Assign(attrs ...field.AssignExpr) IRoomUserDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomUserDo) Joins(fields ...field.RelationField) IRoomUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomUserDo) Preload(fields ...field.RelationField) IRoomUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomUserDo) FirstOrInit() (*chat_model.RoomUser, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.RoomUser), nil
	}
}

func (r roomUserDo) FirstOrCreate() (*chat_model.RoomUser, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.RoomUser), nil
	}
}

func (r roomUserDo) FindByPage(offset int, limit int) (result []*chat_model.RoomUser, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomUserDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomUserDo) Delete(models ...*chat_model.RoomUser) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomUserDo) withDO(do gen.Dao) *roomUserDo {
	r.DO = *do.(*gen.DO)
	return r
}
