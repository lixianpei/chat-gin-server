// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package chat_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GoChatServer/dal/model/chat_model"
)

func newRoom(db *gorm.DB, opts ...gen.DOOption) room {
	_room := room{}

	_room.roomDo.UseDB(db, opts...)
	_room.roomDo.UseModel(&chat_model.Room{})

	tableName := _room.roomDo.TableName()
	_room.ALL = field.NewAsterisk(tableName)
	_room.ID = field.NewInt64(tableName, "id")
	_room.Title = field.NewString(tableName, "title")
	_room.Type = field.NewInt32(tableName, "type")
	_room.UserCount = field.NewInt32(tableName, "user_count")
	_room.LastMessageID = field.NewInt64(tableName, "last_message_id")
	_room.CreatedUserID = field.NewInt64(tableName, "created_user_id")
	_room.CreatedAt = field.NewTime(tableName, "created_at")
	_room.UpdatedAt = field.NewTime(tableName, "updated_at")
	_room.DeletedAt = field.NewField(tableName, "deleted_at")

	_room.fillFieldMap()

	return _room
}

// room 聊天会话
type room struct {
	roomDo

	ALL           field.Asterisk
	ID            field.Int64  // 自增
	Title         field.String // 聊天会话名称
	Type          field.Int32  // 聊天会话类型：1-私聊；2-群聊；
	UserCount     field.Int32  // 聊天会话用户总数
	LastMessageID field.Int64  // 最后一条消息ID
	CreatedUserID field.Int64  // 创建的用户ID
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (r room) Table(newTableName string) *room {
	r.roomDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r room) As(alias string) *room {
	r.roomDo.DO = *(r.roomDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *room) updateTableName(table string) *room {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Title = field.NewString(table, "title")
	r.Type = field.NewInt32(table, "type")
	r.UserCount = field.NewInt32(table, "user_count")
	r.LastMessageID = field.NewInt64(table, "last_message_id")
	r.CreatedUserID = field.NewInt64(table, "created_user_id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *room) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *room) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["title"] = r.Title
	r.fieldMap["type"] = r.Type
	r.fieldMap["user_count"] = r.UserCount
	r.fieldMap["last_message_id"] = r.LastMessageID
	r.fieldMap["created_user_id"] = r.CreatedUserID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r room) clone(db *gorm.DB) room {
	r.roomDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r room) replaceDB(db *gorm.DB) room {
	r.roomDo.ReplaceDB(db)
	return r
}

type roomDo struct{ gen.DO }

type IRoomDo interface {
	gen.SubQuery
	Debug() IRoomDo
	WithContext(ctx context.Context) IRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoomDo
	WriteDB() IRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoomDo
	Not(conds ...gen.Condition) IRoomDo
	Or(conds ...gen.Condition) IRoomDo
	Select(conds ...field.Expr) IRoomDo
	Where(conds ...gen.Condition) IRoomDo
	Order(conds ...field.Expr) IRoomDo
	Distinct(cols ...field.Expr) IRoomDo
	Omit(cols ...field.Expr) IRoomDo
	Join(table schema.Tabler, on ...field.Expr) IRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoomDo
	Group(cols ...field.Expr) IRoomDo
	Having(conds ...gen.Condition) IRoomDo
	Limit(limit int) IRoomDo
	Offset(offset int) IRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomDo
	Unscoped() IRoomDo
	Create(values ...*chat_model.Room) error
	CreateInBatches(values []*chat_model.Room, batchSize int) error
	Save(values ...*chat_model.Room) error
	First() (*chat_model.Room, error)
	Take() (*chat_model.Room, error)
	Last() (*chat_model.Room, error)
	Find() ([]*chat_model.Room, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.Room, err error)
	FindInBatches(result *[]*chat_model.Room, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*chat_model.Room) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoomDo
	Assign(attrs ...field.AssignExpr) IRoomDo
	Joins(fields ...field.RelationField) IRoomDo
	Preload(fields ...field.RelationField) IRoomDo
	FirstOrInit() (*chat_model.Room, error)
	FirstOrCreate() (*chat_model.Room, error)
	FindByPage(offset int, limit int) (result []*chat_model.Room, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roomDo) Debug() IRoomDo {
	return r.withDO(r.DO.Debug())
}

func (r roomDo) WithContext(ctx context.Context) IRoomDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomDo) ReadDB() IRoomDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomDo) WriteDB() IRoomDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomDo) Session(config *gorm.Session) IRoomDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomDo) Clauses(conds ...clause.Expression) IRoomDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomDo) Returning(value interface{}, columns ...string) IRoomDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomDo) Not(conds ...gen.Condition) IRoomDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomDo) Or(conds ...gen.Condition) IRoomDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomDo) Select(conds ...field.Expr) IRoomDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomDo) Where(conds ...gen.Condition) IRoomDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomDo) Order(conds ...field.Expr) IRoomDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomDo) Distinct(cols ...field.Expr) IRoomDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomDo) Omit(cols ...field.Expr) IRoomDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomDo) Join(table schema.Tabler, on ...field.Expr) IRoomDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoomDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoomDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomDo) Group(cols ...field.Expr) IRoomDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomDo) Having(conds ...gen.Condition) IRoomDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomDo) Limit(limit int) IRoomDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomDo) Offset(offset int) IRoomDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomDo) Unscoped() IRoomDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomDo) Create(values ...*chat_model.Room) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomDo) CreateInBatches(values []*chat_model.Room, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomDo) Save(values ...*chat_model.Room) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomDo) First() (*chat_model.Room, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Room), nil
	}
}

func (r roomDo) Take() (*chat_model.Room, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Room), nil
	}
}

func (r roomDo) Last() (*chat_model.Room, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Room), nil
	}
}

func (r roomDo) Find() ([]*chat_model.Room, error) {
	result, err := r.DO.Find()
	return result.([]*chat_model.Room), err
}

func (r roomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.Room, err error) {
	buf := make([]*chat_model.Room, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomDo) FindInBatches(result *[]*chat_model.Room, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomDo) Attrs(attrs ...field.AssignExpr) IRoomDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomDo) Assign(attrs ...field.AssignExpr) IRoomDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomDo) Joins(fields ...field.RelationField) IRoomDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomDo) Preload(fields ...field.RelationField) IRoomDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomDo) FirstOrInit() (*chat_model.Room, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Room), nil
	}
}

func (r roomDo) FirstOrCreate() (*chat_model.Room, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Room), nil
	}
}

func (r roomDo) FindByPage(offset int, limit int) (result []*chat_model.Room, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomDo) Delete(models ...*chat_model.Room) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomDo) withDO(do gen.Dao) *roomDo {
	r.DO = *do.(*gen.DO)
	return r
}
