// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package chat_query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Attachment  *attachment
	Message     *message
	MessageUser *messageUser
	Room        *room
	RoomUser    *roomUser
	User        *user
	UserContact *userContact
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Attachment = &Q.Attachment
	Message = &Q.Message
	MessageUser = &Q.MessageUser
	Room = &Q.Room
	RoomUser = &Q.RoomUser
	User = &Q.User
	UserContact = &Q.UserContact
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Attachment:  newAttachment(db, opts...),
		Message:     newMessage(db, opts...),
		MessageUser: newMessageUser(db, opts...),
		Room:        newRoom(db, opts...),
		RoomUser:    newRoomUser(db, opts...),
		User:        newUser(db, opts...),
		UserContact: newUserContact(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Attachment  attachment
	Message     message
	MessageUser messageUser
	Room        room
	RoomUser    roomUser
	User        user
	UserContact userContact
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Attachment:  q.Attachment.clone(db),
		Message:     q.Message.clone(db),
		MessageUser: q.MessageUser.clone(db),
		Room:        q.Room.clone(db),
		RoomUser:    q.RoomUser.clone(db),
		User:        q.User.clone(db),
		UserContact: q.UserContact.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Attachment:  q.Attachment.replaceDB(db),
		Message:     q.Message.replaceDB(db),
		MessageUser: q.MessageUser.replaceDB(db),
		Room:        q.Room.replaceDB(db),
		RoomUser:    q.RoomUser.replaceDB(db),
		User:        q.User.replaceDB(db),
		UserContact: q.UserContact.replaceDB(db),
	}
}

type queryCtx struct {
	Attachment  IAttachmentDo
	Message     IMessageDo
	MessageUser IMessageUserDo
	Room        IRoomDo
	RoomUser    IRoomUserDo
	User        IUserDo
	UserContact IUserContactDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Attachment:  q.Attachment.WithContext(ctx),
		Message:     q.Message.WithContext(ctx),
		MessageUser: q.MessageUser.WithContext(ctx),
		Room:        q.Room.WithContext(ctx),
		RoomUser:    q.RoomUser.WithContext(ctx),
		User:        q.User.WithContext(ctx),
		UserContact: q.UserContact.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
