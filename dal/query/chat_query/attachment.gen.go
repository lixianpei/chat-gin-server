// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package chat_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GoChatServer/dal/model/chat_model"
)

func newAttachment(db *gorm.DB, opts ...gen.DOOption) attachment {
	_attachment := attachment{}

	_attachment.attachmentDo.UseDB(db, opts...)
	_attachment.attachmentDo.UseModel(&chat_model.Attachment{})

	tableName := _attachment.attachmentDo.TableName()
	_attachment.ALL = field.NewAsterisk(tableName)
	_attachment.ID = field.NewInt64(tableName, "id")
	_attachment.Filename = field.NewString(tableName, "filename")
	_attachment.Size = field.NewInt64(tableName, "size")
	_attachment.Type = field.NewString(tableName, "type")
	_attachment.Extension = field.NewString(tableName, "extension")
	_attachment.Path = field.NewString(tableName, "path")
	_attachment.UserID = field.NewInt64(tableName, "user_id")
	_attachment.CreatedAt = field.NewTime(tableName, "created_at")
	_attachment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_attachment.DeletedAt = field.NewField(tableName, "deleted_at")

	_attachment.fillFieldMap()

	return _attachment
}

// attachment 附件
type attachment struct {
	attachmentDo

	ALL       field.Asterisk
	ID        field.Int64  // 附件ID
	Filename  field.String // 附件名称
	Size      field.Int64  // 附件大小：单位-字节（B）
	Type      field.String // 类型content-type
	Extension field.String // 扩展名
	Path      field.String // 文件的相对路径
	UserID    field.Int64  // 用户ID
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (a attachment) Table(newTableName string) *attachment {
	a.attachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachment) As(alias string) *attachment {
	a.attachmentDo.DO = *(a.attachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachment) updateTableName(table string) *attachment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Filename = field.NewString(table, "filename")
	a.Size = field.NewInt64(table, "size")
	a.Type = field.NewString(table, "type")
	a.Extension = field.NewString(table, "extension")
	a.Path = field.NewString(table, "path")
	a.UserID = field.NewInt64(table, "user_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *attachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["filename"] = a.Filename
	a.fieldMap["size"] = a.Size
	a.fieldMap["type"] = a.Type
	a.fieldMap["extension"] = a.Extension
	a.fieldMap["path"] = a.Path
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a attachment) clone(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachment) replaceDB(db *gorm.DB) attachment {
	a.attachmentDo.ReplaceDB(db)
	return a
}

type attachmentDo struct{ gen.DO }

type IAttachmentDo interface {
	gen.SubQuery
	Debug() IAttachmentDo
	WithContext(ctx context.Context) IAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttachmentDo
	WriteDB() IAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttachmentDo
	Not(conds ...gen.Condition) IAttachmentDo
	Or(conds ...gen.Condition) IAttachmentDo
	Select(conds ...field.Expr) IAttachmentDo
	Where(conds ...gen.Condition) IAttachmentDo
	Order(conds ...field.Expr) IAttachmentDo
	Distinct(cols ...field.Expr) IAttachmentDo
	Omit(cols ...field.Expr) IAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo
	Group(cols ...field.Expr) IAttachmentDo
	Having(conds ...gen.Condition) IAttachmentDo
	Limit(limit int) IAttachmentDo
	Offset(offset int) IAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo
	Unscoped() IAttachmentDo
	Create(values ...*chat_model.Attachment) error
	CreateInBatches(values []*chat_model.Attachment, batchSize int) error
	Save(values ...*chat_model.Attachment) error
	First() (*chat_model.Attachment, error)
	Take() (*chat_model.Attachment, error)
	Last() (*chat_model.Attachment, error)
	Find() ([]*chat_model.Attachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.Attachment, err error)
	FindInBatches(result *[]*chat_model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*chat_model.Attachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttachmentDo
	Assign(attrs ...field.AssignExpr) IAttachmentDo
	Joins(fields ...field.RelationField) IAttachmentDo
	Preload(fields ...field.RelationField) IAttachmentDo
	FirstOrInit() (*chat_model.Attachment, error)
	FirstOrCreate() (*chat_model.Attachment, error)
	FindByPage(offset int, limit int) (result []*chat_model.Attachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attachmentDo) Debug() IAttachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentDo) WithContext(ctx context.Context) IAttachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentDo) ReadDB() IAttachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentDo) WriteDB() IAttachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentDo) Session(config *gorm.Session) IAttachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentDo) Clauses(conds ...clause.Expression) IAttachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentDo) Returning(value interface{}, columns ...string) IAttachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentDo) Not(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentDo) Or(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentDo) Select(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentDo) Where(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentDo) Order(conds ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentDo) Distinct(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentDo) Omit(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentDo) Join(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentDo) Group(cols ...field.Expr) IAttachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentDo) Having(conds ...gen.Condition) IAttachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentDo) Limit(limit int) IAttachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentDo) Offset(offset int) IAttachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentDo) Unscoped() IAttachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentDo) Create(values ...*chat_model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentDo) CreateInBatches(values []*chat_model.Attachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentDo) Save(values ...*chat_model.Attachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentDo) First() (*chat_model.Attachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Attachment), nil
	}
}

func (a attachmentDo) Take() (*chat_model.Attachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Attachment), nil
	}
}

func (a attachmentDo) Last() (*chat_model.Attachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Attachment), nil
	}
}

func (a attachmentDo) Find() ([]*chat_model.Attachment, error) {
	result, err := a.DO.Find()
	return result.([]*chat_model.Attachment), err
}

func (a attachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*chat_model.Attachment, err error) {
	buf := make([]*chat_model.Attachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentDo) FindInBatches(result *[]*chat_model.Attachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentDo) Attrs(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentDo) Assign(attrs ...field.AssignExpr) IAttachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentDo) Joins(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentDo) Preload(fields ...field.RelationField) IAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentDo) FirstOrInit() (*chat_model.Attachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Attachment), nil
	}
}

func (a attachmentDo) FirstOrCreate() (*chat_model.Attachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*chat_model.Attachment), nil
	}
}

func (a attachmentDo) FindByPage(offset int, limit int) (result []*chat_model.Attachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentDo) Delete(models ...*chat_model.Attachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentDo) withDO(do gen.Dao) *attachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
